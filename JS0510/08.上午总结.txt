一、函数
 概念： 把一段相对独立的 具有特定功能的代码块 封装起来（包起来）形成一个独立实体(函数)，
 可以给这个实体起一个名字（函数名），后期可以反复调用这个函数 实现代码复用
 
 作用：封装代码，实现功能复用
 
 分类：
  1 有名函数  function abc(){}
  2 匿名函数  function() {}  事件可以调用匿名函数
  
  1 内置系统函数 (function alert() {}  function Number(){})
  2 自定义函数 (用户自定义函数) function abc() {}
 
 如何定义函数呢？
	1 函数声明：
		var 
		function 函数名() {
			
		}
	2 函数表达式
		var fn = function(){ 
			
		}
		
  函数的调用：有很多种
	 1 函数名+() 直接调用  只能调用有名函数  不能调用匿名函数  
	 2 事件调用  既可以有名函数也可以调用匿名函数   单击事件 触发一个函数  aBtn.onclick = function() {}
	 
	 function fn() {
		 alert(123)
	 }
	函数不会主动执行， 需要调用才可以执行
	
	
二、函数传参
	function 函数名(形参1,形参2,...) {  // 函数在定义的时候 写的参数  形参相当于局部变量
		
	}
	
	函数名(实参1，实参2,...); //函数在调用的时候 传入的参数 
	
	形参和实参 要一一对应 接收 
	
	什么情况会使用传参
	
	通过举了一个小例子(实现任意两个数求和)
	希望每一次执行代码的时候 分别计算不同的两个的数和
	
	function sum(a,b) {
		
	}
	
	sum(4,7);
	sum(11,13);
	
	举了一个例子： 1--100求和   20--80也可以求和
	
	function fn(a,b) {
		var sum = 0;
		for(var i = a; i<=b; i++) {
			sum += i;
		}
		console.log(sum);
	}
	
	fn(1,100);
	fn(20,80);
	
	// 选项卡 案例 ===》 选项卡传参 
	
	
	// 封装 getId函数  （return待会儿说）
	
三、作用域和预解析
	全局作用域 局部作用域（函数）
	全局变量   局部变量
	
	js解析器：  1、预解析  2、代码执行
		预解析：
			解析 声明变量 声明的函数 形参  
			PK规则： 同名的情况下 函数名 覆盖 变量名   同级别 后者覆盖前者
	预解析题  面试题
	
	作用域链：
		局部作用域 可以向 外层 作用域去找声明的变量和函数
		而外层作用域里面的数据 无法 向内找声明的变量和函数
		
	arguments 实参集合  适合实参 个数不确定的情况下  比如 求任意个数的和  最大值
	
	this 当前函数被谁调用 this指向谁
	
	return 返回值
			return: 用于在函数中 返回特定的数据 可以返回任何类型的数据
		    return 默认返回undefined
			return 返回返回值之后 后面的代码不执行  函数终止
	
作业：
		0 把课件过一遍
		1 选项卡传参
		2 计价器
		3 封装 $ 函数获取id
		4 预解析的面试题 做一遍
			alert(a);
			var a = 1;
			alert(a);
			function a(){alert(2)}
			alert(a)
			var a = 3;
			alert(a)
			function a(){alert(4)}
			alert(a)
	   扩展
		 （100小方块）擦出图片
		qq列表
	
	